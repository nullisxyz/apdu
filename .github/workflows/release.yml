name: Release

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Release version (without v prefix)"
                required: false
                type: string
            level:
                description: "Release level (if version not specified)"
                required: false
                default: "patch"
                type: choice
                options:
                    - patch
                    - minor
                    - major
                    - release
            dry-run:
                description: "Dry run (no actual changes)"
                required: false
                default: false
                type: boolean

permissions:
    contents: write # For git push, creating tags
    pull-requests: write # For creating PRs (if needed)
    packages: write # For publishing packages (if needed)

jobs:
    release:
        name: Prepare and Publish Release
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  # Use the built-in token which inherits permissions from the workflow
                  token: ${{ github.token }}

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Cache dependencies
              uses: Swatinem/rust-cache@v2

            - name: Set Git identity
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "github-actions@github.com"

            - name: Install cargo-release
              run: cargo install cargo-release

            - name: Install git-cliff
              run: cargo install git-cliff

            - name: Prepare version info
              id: version_info
              run: |
                  if [ "${{ inputs.version }}" != "" ]; then
                    # Manual version
                    echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
                    echo "VERSION_ARG=--version ${{ inputs.version }}" >> $GITHUB_OUTPUT
                  else
                    # Use level
                    echo "VERSION_ARG=${{ inputs.level }}" >> $GITHUB_OUTPUT

                    # Calculate next version
                    CURRENT_VERSION=$(grep -m 1 'version = "' Cargo.toml | sed 's/.*version = "\(.*\)".*/\1/')
                    if [ "${{ inputs.level }}" = "patch" ]; then
                      IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                      NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))"
                    elif [ "${{ inputs.level }}" = "minor" ]; then
                      IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                      NEXT_VERSION="${VERSION_PARTS[0]}.$((VERSION_PARTS[1] + 1)).0"
                    elif [ "${{ inputs.level }}" = "major" ]; then
                      IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                      NEXT_VERSION="$((VERSION_PARTS[0] + 1)).0.0"
                    else
                      NEXT_VERSION="$CURRENT_VERSION"
                    fi
                    echo "VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
                  fi

                  if [ "${{ inputs.dry-run }}" = "true" ]; then
                    echo "IS_DRY_RUN=true" >> $GITHUB_OUTPUT
                  else
                    echo "IS_DRY_RUN=false" >> $GITHUB_OUTPUT
                  fi

            - name: Release process (Dry Run)
              if: ${{ steps.version_info.outputs.IS_DRY_RUN == 'true' }}
              env:
                  CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
                  WORKSPACE_ROOT: ${{ github.workspace }}
              run: |
                  echo "Dry run - version bump to ${{ steps.version_info.outputs.VERSION }}"

                  # Run individual commands in dry-run mode
                  cargo release ${{ steps.version_info.outputs.VERSION_ARG }} --workspace --no-confirm

            - name: Release process (Execute)
              if: ${{ steps.version_info.outputs.IS_DRY_RUN == 'false' }}
              env:
                  CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
                  WORKSPACE_ROOT: ${{ github.workspace }}
                  GIT_CREDENTIALS: https://x-access-token:${{ github.token }}@github.com
              run: |
                  echo "Releasing version ${{ steps.version_info.outputs.VERSION }}"

                  # Execute individual commands to ensure they run
                  cargo release ${{ steps.version_info.outputs.VERSION_ARG }} --workspace --execute --no-confirm

            - name: Create summary
              run: |
                  echo "# Release Process Completed! ðŸš€" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  if [ "${{ steps.version_info.outputs.IS_DRY_RUN }}" == "true" ]; then
                    echo "**DRY RUN**: No actual changes were made" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "Version: ${{ steps.version_info.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "The following actions were completed:" >> $GITHUB_STEP_SUMMARY
                    echo "- Version bumped to ${{ steps.version_info.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
                    echo "- CHANGELOG.md updated" >> $GITHUB_STEP_SUMMARY
                    echo "- Changes committed" >> $GITHUB_STEP_SUMMARY
                    echo "- Crates published to crates.io" >> $GITHUB_STEP_SUMMARY
                    echo "- Git tag created" >> $GITHUB_STEP_SUMMARY
                    echo "- Changes pushed to GitHub" >> $GITHUB_STEP_SUMMARY
                  fi
