name: Release

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Release version (without v prefix)"
                required: false
                type: string
            level:
                description: "Release level (if version not specified)"
                required: false
                default: "patch"
                type: choice
                options:
                    - patch
                    - minor
                    - major
            dry-run:
                description: "Dry run (no actual changes)"
                required: false
                default: false
                type: boolean

jobs:
    release:
        name: Prepare and Publish Release
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.RELEASE_TOKEN }}

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Cache dependencies
              uses: Swatinem/rust-cache@v2

            - name: Set Git identity
              run: |
                  git config --global user.name "Nullis Release Bot"
                  git config --global user.email "github-actions@nullis.xyz"

            - name: Install cargo-release
              run: cargo install cargo-release

            - name: Install git-cliff
              uses: orhun/git-cliff-action@v2
              with:
                  config: cliff.toml
                  args: --verbose

            - name: Set version arguments
              id: version_args
              run: |
                  if [ "${{ inputs.version }}" != "" ]; then
                    # Manual version
                    echo "VERSION_ARG=--version ${{ inputs.version }}" >> $GITHUB_OUTPUT
                    echo "TAG_VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
                  else
                    # Automatic version bump
                    echo "VERSION_ARG=--${{ inputs.level }}" >> $GITHUB_OUTPUT

                    # Extract the current version from Cargo.toml and calculate the next version
                    CURRENT_VERSION=$(grep -m 1 'version = "' Cargo.toml | sed 's/.*version = "\(.*\)".*/\1/')

                    # Simple version calculation (this is a basic implementation)
                    if [ "${{ inputs.level }}" = "patch" ]; then
                      IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                      NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))"
                    elif [ "${{ inputs.level }}" = "minor" ]; then
                      IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                      NEXT_VERSION="${VERSION_PARTS[0]}.$((VERSION_PARTS[1] + 1)).0"
                    elif [ "${{ inputs.level }}" = "major" ]; then
                      IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                      NEXT_VERSION="$((VERSION_PARTS[0] + 1)).0.0"
                    fi

                    echo "TAG_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
                  fi

                  if [ "${{ inputs.dry-run }}" = "true" ]; then
                    echo "DRY_RUN_ARG=--dry-run" >> $GITHUB_OUTPUT
                    echo "IS_DRY_RUN=true" >> $GITHUB_OUTPUT
                  else
                    echo "DRY_RUN_ARG=" >> $GITHUB_OUTPUT
                    echo "IS_DRY_RUN=false" >> $GITHUB_OUTPUT
                  fi

            - name: Run cargo-release
              env:
                  CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
                  WORKSPACE_ROOT: ${{ github.workspace }}
              run: |
                  echo "Running cargo release with args: ${{ steps.version_args.outputs.VERSION_ARG }} ${{ steps.version_args.outputs.DRY_RUN_ARG }}"
                  cargo release ${{ steps.version_args.outputs.VERSION_ARG }} ${{ steps.version_args.outputs.DRY_RUN_ARG }} --execute

            - name: Create GitHub Release
              if: ${{ steps.version_args.outputs.IS_DRY_RUN == 'false' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  VERSION="${{ steps.version_args.outputs.TAG_VERSION }}"

                  # Get the content of the latest entry in CHANGELOG.md
                  CHANGELOG_CONTENT=$(awk '/^## \[[0-9]+\.[0-9]+\.[0-9]+\]/ {if (p) {exit}; p=1; next} p' CHANGELOG.md | sed '/^## /q' | sed '$d')

                  # Create GitHub release
                  gh release create "v$VERSION" \
                    --title "v$VERSION" \
                    --notes "$CHANGELOG_CONTENT" \
                    --verify-tag

            - name: Create summary
              if: ${{ steps.version_args.outputs.IS_DRY_RUN == 'false' }}
              run: |
                  echo "# Release Published! ðŸš€" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "Version: ${{ steps.version_args.outputs.TAG_VERSION }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "The following crates have been published to crates.io:" >> $GITHUB_STEP_SUMMARY
                  echo "- nexum-apdu-core" >> $GITHUB_STEP_SUMMARY
                  echo "- nexum-apdu-macros" >> $GITHUB_STEP_SUMMARY
                  echo "- nexum-apdu-transport-pcsc" >> $GITHUB_STEP_SUMMARY
                  echo "- nexum-apdu-globalplatform" >> $GITHUB_STEP_SUMMARY
